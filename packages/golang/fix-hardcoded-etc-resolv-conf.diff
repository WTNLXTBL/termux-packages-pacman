--- a/src/net/conf.go
+++ b/src/net/conf.go
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.

-//go:build !js
+//go:build !js && !android

 package net

--- a/src/net/conf_android.go
+++ b/src/net/conf_android.go
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.

-//go:build !js
+//go:build android

 package net

@@ -408,7 +408,7 @@
 				var haveMDNSAllow bool
 				switch c.mdnsTest {
 				case mdnsFromSystem:
-					_, err := os.Stat("/etc/mdns.allow")
+					_, err := os.Stat("@TERMUX_PREFIX@/etc/mdns.allow")
 					if err != nil && !errors.Is(err, fs.ErrNotExist) {
 						// Let libc figure out what is going on.
 						return hostLookupCgo, dnsConf
--- a/src/net/dnsclient_unix.go
+++ b/src/net/dnsclient_unix.go
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.

-//go:build !js
+//go:build !js && !android

 // DNS client: see RFC 1035.
 // Has to be linked into package net for Dial.
--- a/src/net/dnsclient_android.go
+++ b/src/net/dnsclient_android.go
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.

-//go:build !js
+//go:build android

 // DNS client: see RFC 1035.
 // Has to be linked into package net for Dial.
@@ -349,7 +349,7 @@
 var resolvConf resolverConfig
 
 func getSystemDNSConfig() *dnsConfig {
-	resolvConf.tryUpdate("/etc/resolv.conf")
+	resolvConf.tryUpdate("@TERMUX_PREFIX@/etc/resolv.conf")
 	return resolvConf.dnsConfig.Load()
 }
 
@@ -357,7 +357,7 @@
 func (conf *resolverConfig) init() {
 	// Set dnsConfig and lastChecked so we don't parse
 	// resolv.conf twice the first time.
-	conf.dnsConfig.Store(dnsReadConfig("/etc/resolv.conf"))
+	conf.dnsConfig.Store(dnsReadConfig("@TERMUX_PREFIX@/etc/resolv.conf"))
 	conf.lastChecked = time.Now()
 
 	// Prepare ch so that only one update of resolverConfig may
