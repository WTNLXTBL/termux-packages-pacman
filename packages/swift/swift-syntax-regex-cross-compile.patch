diff --git a/swift/CMakeLists.txt b/swift/CMakeLists.txt
index 28dfded4ecc..45c68998bec 100644
--- a/swift/CMakeLists.txt
+++ b/swift/CMakeLists.txt
@@ -950,7 +950,7 @@ endif()
 
 if(SWIFT_BUILD_SWIFT_SYNTAX)
   # Only "HOSTTOOLS" is supported in Linux when Swift parser integration is enabled.
-  if(SWIFT_HOST_VARIANT_SDK MATCHES "LINUX|ANDROID|OPENBSD|FREEBSD" AND NOT BOOTSTRAPPING_MODE STREQUAL "HOSTTOOLS")
+  if(SWIFT_HOST_VARIANT_SDK MATCHES "LINUX|ANDROID|OPENBSD|FREEBSD" AND NOT BOOTSTRAPPING_MODE MATCHES "HOSTTOOLS|OFF")
     message(WARNING "Force setting BOOTSTRAPPING=HOSTTOOLS because Swift parser integration is enabled")
     set(BOOTSTRAPPING_MODE "HOSTTOOLS")
   endif()
@@ -1345,6 +1345,9 @@ if(SWIFT_INCLUDE_TOOLS)
     FetchContent_MakeAvailable(SwiftSyntax)
   endfunction()
   include_swift_syntax()
+  if (NOT "${SWIFT_ANDROID_NDK_PATH}" STREQUAL "")
+    add_dependencies(SwiftSyntax swift-stdlib-android-${SWIFT_HOST_VARIANT_ARCH})
+  endif()
 
   add_subdirectory(lib)
 
diff --git a/swift/cmake/modules/AddPureSwift.cmake b/swift/cmake/modules/AddPureSwift.cmake
index dc58b8fa0f6..37e9f817471 100644
--- a/swift/cmake/modules/AddPureSwift.cmake
+++ b/swift/cmake/modules/AddPureSwift.cmake
@@ -44,6 +44,12 @@ function(_add_host_swift_compile_options name)
     $<$<COMPILE_LANGUAGE:Swift>:none>)
 
   target_compile_options(${name} PRIVATE $<$<COMPILE_LANGUAGE:Swift>:-target;${SWIFT_HOST_TRIPLE}>)
+  if (NOT "${SWIFT_ANDROID_NDK_PATH}" STREQUAL "")
+    swift_android_tools_path(${SWIFT_HOST_VARIANT_ARCH} tools_path)
+    target_compile_options(${name} PRIVATE $<$<COMPILE_LANGUAGE:Swift>:-resource-dir;${SWIFTLIB_DIR};>
+        $<$<COMPILE_LANGUAGE:Swift>:-sdk;${SWIFT_SDK_ANDROID_ARCH_${SWIFT_HOST_VARIANT_ARCH}_PATH};>
+        $<$<COMPILE_LANGUAGE:Swift>:-tools-directory;${tools_path};>)
+  endif()
   _add_host_variant_swift_sanitizer_flags(${name})
 endfunction()
 
@@ -76,7 +76,7 @@ function(_set_pure_swift_link_flags name relpath_to_lib_dir)
       APPEND PROPERTY INSTALL_RPATH
         # At runtime, use swiftCore in the current just-built toolchain.
         # NOTE: This relies on the ABI being the same as the builder.
-        "$ORIGIN/${relpath_to_lib_dir}/swift/${SWIFT_SDK_${SWIFT_HOST_VARIANT_SDK}_LIB_SUBDIR}"
+        "$ORIGIN/${relpath_to_lib_dir}"
     )
     # NOTE: At this point we don't have any pure swift executables/shared
     # libraries required for building runtime/stdlib. So we don't need to add
diff --git a/swift/cmake/modules/AddSwift.cmake b/swift/cmake/modules/AddSwift.cmake
index ecdea6de266..777ea384050 100644
--- a/swift/cmake/modules/AddSwift.cmake
+++ b/swift/cmake/modules/AddSwift.cmake
@@ -442,7 +442,11 @@ endfunction()
 function(_add_swift_runtime_link_flags target relpath_to_lib_dir bootstrapping)
   if(NOT BOOTSTRAPPING_MODE)
     if (SWIFT_BUILD_SWIFT_SYNTAX)
-      set(ASRLF_BOOTSTRAPPING_MODE "HOSTTOOLS")
+      if (NOT "${SWIFT_ANDROID_NDK_PATH}" STREQUAL "")
+        set(ASRLF_BOOTSTRAPPING_MODE "CROSSCOMPILE")
+      else()
+        set(ASRLF_BOOTSTRAPPING_MODE "HOSTTOOLS")
+      endif()
     else()
       return()
     endif()
diff --git a/swift/stdlib/cmake/modules/SwiftSource.cmake b/swift/stdlib/cmake/modules/SwiftSource.cmake
--- a/swift/stdlib/cmake/modules/SwiftSource.cmake
+++ b/swift/stdlib/cmake/modules/SwiftSource.cmake
@@ -777,7 +777,7 @@
   endif()
 
   set(swift_compiler_tool_dep)
-  if(SWIFT_INCLUDE_TOOLS AND NOT ${BOOTSTRAPPING_MODE} STREQUAL "CROSSCOMPILE")
+  if(SWIFT_INCLUDE_TOOLS AND NOT ${BOOTSTRAPPING_MODE} STREQUAL "CROSSCOMPILE" AND "${SWIFT_ANDROID_NDK_PATH}" STREQUAL "")
     # Depend on the binary itself, in addition to the symlink.
     set(swift_compiler_tool_dep "swift-frontend${target_suffix}")
   endif()
diff --git a/swift/tools/libStaticMirror/CMakeLists.txt b/swift/tools/libStaticMirror/CMakeLists.txt
index 1b8c563b05a..463faab64de 100644
--- a/swift/tools/libStaticMirror/CMakeLists.txt
+++ b/swift/tools/libStaticMirror/CMakeLists.txt
@@ -28,6 +28,9 @@ add_llvm_symbol_exports(libStaticMirror ${LLVM_EXPORTED_SYMBOL_FILE})
 
 # Adds -dead_strip option
 add_link_opts(libStaticMirror)
+if(SWIFT_HOST_VARIANT_SDK STREQUAL "ANDROID")
+  target_link_options(libStaticMirror PRIVATE "SHELL:-Xlinker -z -Xlinker nostart-stop-gc")
+endif()
 
 add_dependencies(static-mirror-lib libStaticMirror)
 swift_install_in_component(TARGETS libStaticMirror
diff --git a/swift/tools/libSwiftScan/CMakeLists.txt b/swift/tools/libSwiftScan/CMakeLists.txt
index 1a99080337f..163a8d45690 100644
--- a/swift/tools/libSwiftScan/CMakeLists.txt
+++ b/swift/tools/libSwiftScan/CMakeLists.txt
@@ -66,6 +66,9 @@ add_llvm_symbol_exports(libSwiftScan ${LLVM_EXPORTED_SYMBOL_FILE})
 
 # Adds -dead_strip option
 add_link_opts(libSwiftScan)
+if(SWIFT_HOST_VARIANT_SDK STREQUAL "ANDROID")
+  target_link_options(libSwiftScan PRIVATE "SHELL:-Xlinker -z -Xlinker nostart-stop-gc")
+endif()
 
 add_dependencies(compiler libSwiftScan)
 
diff --git a/swift/tools/swift-plugin-server/CMakeLists.txt b/swift/tools/swift-plugin-server/CMakeLists.txt
index a21b79ed260..5b591a30514 100644
--- a/swift/tools/swift-plugin-server/CMakeLists.txt
+++ b/swift/tools/swift-plugin-server/CMakeLists.txt
@@ -1,28 +1,19 @@
 if (SWIFT_BUILD_SWIFT_SYNTAX)
-  # _swiftCSwiftPluginServer is just a C support library for swift-plugin-server
-  # Don't bother to create '.a' for that.
-  add_swift_host_library(_swiftCSwiftPluginServer OBJECT
-    Sources/CSwiftPluginServer/PluginServer.cpp
-  )
-  target_link_libraries(_swiftCSwiftPluginServer PRIVATE
-    swiftDemangling
+  add_swift_host_tool(swift-plugin-server SWIFT_COMPONENT compiler Sources/CSwiftPluginServer/PluginServer.cpp)
+  add_pure_swift_host_library(SwiftPluginServer STATIC
+    Sources/swift-plugin-server/swift-plugin-server.swift
   )
-  target_include_directories(_swiftCSwiftPluginServer PUBLIC
+  target_include_directories(SwiftPluginServer PUBLIC
     Sources/CSwiftPluginServer/include
   )
-
-  add_pure_swift_host_tool(swift-plugin-server
-    Sources/swift-plugin-server/swift-plugin-server.swift
-    DEPENDENCIES
+  target_link_libraries(SwiftPluginServer PRIVATE SwiftCompilerPluginMessageHandling)
+  target_link_libraries(swift-plugin-server PRIVATE
       swiftDemangling
-      $<TARGET_OBJECTS:_swiftCSwiftPluginServer>
-    SWIFT_COMPONENT
-      compiler
-    SWIFT_DEPENDENCIES
       SwiftSyntaxMacros
       SwiftSyntaxMacroExpansion
       SwiftCompilerPluginMessageHandling
       swiftLLVMJSON
+      SwiftPluginServer
   )
   target_include_directories(swift-plugin-server PRIVATE
     Sources/CSwiftPluginServer/include
diff --git a/swift-syntax/cmake/modules/AddSwiftHostLibrary.cmake b/swift-syntax/cmake/modules/AddSwiftHostLibrary.cmake
index 951c2d2e..1157ec66 100644
--- a/swift-syntax/cmake/modules/AddSwiftHostLibrary.cmake
+++ b/swift-syntax/cmake/modules/AddSwiftHostLibrary.cmake
@@ -87,6 +87,12 @@ function(add_swift_syntax_library name)
     target_compile_options("${name}" PRIVATE
       $<$<COMPILE_LANGUAGE:Swift>:-target;${SWIFT_HOST_TRIPLE};>
     )
+    if (NOT "${SWIFT_ANDROID_NDK_PATH}" STREQUAL "")
+      swift_android_tools_path(${SWIFT_HOST_VARIANT_ARCH} tools_path)
+      target_compile_options(${name} PRIVATE $<$<COMPILE_LANGUAGE:Swift>:-resource-dir;${SWIFTLIB_DIR};>
+          $<$<COMPILE_LANGUAGE:Swift>:-sdk;${SWIFT_SDK_ANDROID_ARCH_${SWIFT_HOST_VARIANT_ARCH}_PATH};>
+          $<$<COMPILE_LANGUAGE:Swift>:-tools-directory;${tools_path};>)
+    endif()
   endif()
 
   if(LLVM_USE_LINKER)
