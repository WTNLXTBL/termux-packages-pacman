commit 78b88bb6bc428f651ae615a944d985858e0a60f0
Date:   Mon Sep 25 02:19:40 2023 +0530

    Add an rpath flag to disable the default of looking in the local directory for shared libraries
    
    This is useful when deploying build products, as most executables are not installed
    in the same directory as libraries and system libraries do not need it for
    system paths. Use the new flag when installing SwiftPM itself and the {Manifest,Plugin}API
    libraries on ELF platforms.

diff --git a/swiftpm/Sources/Build/BuildDescription/ProductBuildDescription.swift b/swiftpm/Sources/Build/BuildDescription/ProductBuildDescription.swift
index 7aed35e48..5fdb9b4e5 100644
--- a/swiftpm/Sources/Build/BuildDescription/ProductBuildDescription.swift
+++ b/swiftpm/Sources/Build/BuildDescription/ProductBuildDescription.swift
@@ -257,12 +257,14 @@ public final class ProductBuildDescription: SPMBuildCore.ProductBuildDescription
         }
 
         // Set rpath such that dynamic libraries are looked up
-        // adjacent to the product.
-        if self.buildParameters.triple.isLinux() {
-            args += ["-Xlinker", "-rpath=$ORIGIN"]
-        } else if self.buildParameters.triple.isDarwin() {
-            let rpath = self.product.type == .test ? "@loader_path/../../../" : "@loader_path"
-            args += ["-Xlinker", "-rpath", "-Xlinker", rpath]
+        // adjacent to the product, unless overridden.
+        if !self.buildParameters.shouldDisableLocalRpath {
+            if self.buildParameters.triple.isLinux() {
+                args += ["-Xlinker", "-rpath=$ORIGIN"]
+            } else if self.buildParameters.triple.isDarwin() {
+                let rpath = self.product.type == .test ? "@loader_path/../../../" : "@loader_path"
+                args += ["-Xlinker", "-rpath", "-Xlinker", rpath]
+            }
         }
         args += ["@\(self.linkFileListPath.pathString)"]
 
diff --git a/swiftpm/Sources/CoreCommands/Options.swift b/swiftpm/Sources/CoreCommands/Options.swift
index d09b28d6a..739db470e 100644
--- a/swiftpm/Sources/CoreCommands/Options.swift
+++ b/swiftpm/Sources/CoreCommands/Options.swift
@@ -524,6 +524,10 @@ public struct LinkerOptions: ParsableArguments {
     /// If should link the Swift stdlib statically.
     @Flag(name: .customLong("static-swift-stdlib"), inversion: .prefixedNo, help: "Link Swift stdlib statically")
     public var shouldLinkStaticSwiftStdlib: Bool = false
+
+    /// Disables adding $ORIGIN/@loader_path to the rpath, useful when deploying
+    @Flag(name: .customLong("disable-local-rpath"), help: "Disable adding $ORIGIN/@loader_path to the rpath by default")
+    public var shouldDisableLocalRpath: Bool = false
 }
 
 // MARK: - Extensions
diff --git a/swiftpm/Sources/CoreCommands/SwiftTool.swift b/swiftpm/Sources/CoreCommands/SwiftTool.swift
index 72e8be958..b99b80770 100644
--- a/swiftpm/Sources/CoreCommands/SwiftTool.swift
+++ b/swiftpm/Sources/CoreCommands/SwiftTool.swift
@@ -683,6 +683,7 @@ public final class SwiftTool {
             architectures: options.build.architectures,
             workers: options.build.jobs ?? UInt32(ProcessInfo.processInfo.activeProcessorCount),
             shouldLinkStaticSwiftStdlib: options.linker.shouldLinkStaticSwiftStdlib,
+            shouldDisableLocalRpath: options.linker.shouldDisableLocalRpath,
             canRenameEntrypointFunctionName: driverSupport.checkSupportedFrontendFlags(
                 flags: ["entry-point-function-name"],
                 toolchain: toolchain,
diff --git a/swiftpm/Sources/SPMBuildCore/BuildParameters.swift b/swiftpm/Sources/SPMBuildCore/BuildParameters.swift
index 57825c6e4..bbb3c2cc3 100644
--- a/swiftpm/Sources/SPMBuildCore/BuildParameters.swift
+++ b/swiftpm/Sources/SPMBuildCore/BuildParameters.swift
@@ -190,6 +190,9 @@ public struct BuildParameters: Encodable {
     /// If should link the Swift stdlib statically.
     public var shouldLinkStaticSwiftStdlib: Bool
 
+    /// Disables adding $ORIGIN/@loader_path to the rpath, useful when deploying
+    public var shouldDisableLocalRpath: Bool
+
     /// Which compiler sanitizers should be enabled
     public var sanitizers: EnabledSanitizers
 
@@ -362,6 +365,7 @@ public struct BuildParameters: Encodable {
         architectures: [String]? = nil,
         workers: UInt32 = UInt32(ProcessInfo.processInfo.activeProcessorCount),
         shouldLinkStaticSwiftStdlib: Bool = false,
+        shouldDisableLocalRpath: Bool = false,
         shouldEnableManifestCaching: Bool = false,
         canRenameEntrypointFunctionName: Bool = false,
         shouldCreateDylibForDynamicProducts: Bool = true,
@@ -424,6 +428,7 @@ public struct BuildParameters: Encodable {
         self.architectures = architectures
         self.workers = workers
         self.shouldLinkStaticSwiftStdlib = shouldLinkStaticSwiftStdlib
+        self.shouldDisableLocalRpath = shouldDisableLocalRpath
         self.shouldEnableManifestCaching = shouldEnableManifestCaching
         self.shouldCreateDylibForDynamicProducts = shouldCreateDylibForDynamicProducts
         self.canRenameEntrypointFunctionName = canRenameEntrypointFunctionName
@@ -487,6 +492,7 @@ public struct BuildParameters: Encodable {
             architectures: nil,
             workers: self.workers,
             shouldLinkStaticSwiftStdlib: self.shouldLinkStaticSwiftStdlib,
+            shouldDisableLocalRpath: self.shouldDisableLocalRpath,
             shouldEnableManifestCaching: self.shouldEnableManifestCaching,
             canRenameEntrypointFunctionName: self.canRenameEntrypointFunctionName,
             shouldCreateDylibForDynamicProducts: self.shouldCreateDylibForDynamicProducts,
diff --git a/swiftpm/Sources/swift-bootstrap/main.swift b/swiftpm/Sources/swift-bootstrap/main.swift
index 9f45edf51..5c80a5249 100644
--- a/swiftpm/Sources/swift-bootstrap/main.swift
+++ b/swiftpm/Sources/swift-bootstrap/main.swift
@@ -118,6 +118,10 @@ struct SwiftBootstrapBuildTool: ParsableCommand {
     @Flag()
     public var useIntegratedSwiftDriver: Bool = false
 
+    /// Disables adding $ORIGIN/@loader_path to the rpath, useful when deploying
+    @Flag(name: .customLong("disable-local-rpath"), help: "Disable adding $ORIGIN/@loader_path to the rpath by default")
+    public var shouldDisableLocalRpath: Bool = false
+
     private var buildSystem: BuildSystemProvider.Kind {
         #if os(macOS)
         // Force the Xcode build system if we want to build more than one arch.
@@ -188,7 +192,8 @@ struct SwiftBootstrapBuildTool: ParsableCommand {
                 architectures: self.architectures,
                 buildFlags: self.buildFlags,
                 manifestBuildFlags: self.manifestFlags,
-                useIntegratedSwiftDriver: self.useIntegratedSwiftDriver
+                useIntegratedSwiftDriver: self.useIntegratedSwiftDriver,
+                shouldDisableLocalRpath: self.shouldDisableLocalRpath
             )
         } catch _ as Diagnostics {
             throw ExitCode.failure
@@ -232,7 +237,8 @@ struct SwiftBootstrapBuildTool: ParsableCommand {
             architectures: [String],
             buildFlags: BuildFlags,
             manifestBuildFlags: [String],
-            useIntegratedSwiftDriver: Bool
+            useIntegratedSwiftDriver: Bool,
+            shouldDisableLocalRpath: Bool
         ) throws {
             let buildSystem = try createBuildSystem(
                 packagePath: packagePath,
@@ -244,6 +250,7 @@ struct SwiftBootstrapBuildTool: ParsableCommand {
                 buildFlags: buildFlags,
                 manifestBuildFlags: manifestBuildFlags,
                 useIntegratedSwiftDriver: useIntegratedSwiftDriver,
+                shouldDisableLocalRpath: shouldDisableLocalRpath,
                 logLevel: logLevel
             )
             try buildSystem.build(subset: .allExcludingTests)
@@ -259,6 +266,7 @@ struct SwiftBootstrapBuildTool: ParsableCommand {
             buildFlags: BuildFlags,
             manifestBuildFlags: [String],
             useIntegratedSwiftDriver: Bool,
+            shouldDisableLocalRpath: Bool,
             logLevel: Basics.Diagnostic.Severity
         ) throws -> BuildSystem {
 
@@ -277,6 +285,7 @@ struct SwiftBootstrapBuildTool: ParsableCommand {
                 destinationTriple: self.destinationToolchain.triple,
                 flags: buildFlags,
                 architectures: architectures,
+                shouldDisableLocalRpath: shouldDisableLocalRpath,
                 useIntegratedSwiftDriver: useIntegratedSwiftDriver,
                 isXcodeBuildSystemEnabled: buildSystem == .xcode,
                 verboseOutput: logLevel <= .info
diff --git a/swiftpm/Tests/BuildTests/BuildPlanTests.swift b/swiftpm/Tests/BuildTests/BuildPlanTests.swift
index 768952986..c847afd52 100644
--- a/swiftpm/Tests/BuildTests/BuildPlanTests.swift
+++ b/swiftpm/Tests/BuildTests/BuildPlanTests.swift
@@ -5021,4 +5021,80 @@ final class BuildPlanTests: XCTestCase {
 
         XCTAssertMatch(try result.buildProduct(for: "exe").linkArguments(), ["-sanitize=\(expectedName)"])
     }
+
+    func testBasicSwiftPackageWithoutLocalRpath() throws {
+        let fs = InMemoryFileSystem(emptyFiles:
+            "/Pkg/Sources/exe/main.swift",
+            "/Pkg/Sources/lib/lib.swift"
+        )
+
+        let observability = ObservabilitySystem.makeForTesting()
+        let graph = try loadPackageGraph(
+            fileSystem: fs,
+            manifests: [
+                Manifest.createRootManifest(
+                    displayName: "Pkg",
+                    path: "/Pkg",
+                    targets: [
+                        TargetDescription(name: "exe", dependencies: ["lib"]),
+                        TargetDescription(name: "lib", dependencies: []),
+                    ]),
+            ],
+            observabilityScope: observability.topScope
+        )
+        XCTAssertNoDiagnostics(observability.diagnostics)
+
+        let result = try BuildPlanResult(plan: BuildPlan(
+            buildParameters: mockBuildParameters(shouldDisableLocalRpath: true),
+            graph: graph,
+            fileSystem: fs,
+            observabilityScope: observability.topScope
+        ))
+
+        result.checkProductsCount(1)
+        result.checkTargetsCount(2)
+
+        let buildPath = result.plan.buildParameters.dataPath.appending(components: "debug")
+
+      #if os(macOS)
+        let linkArguments = [
+            result.plan.buildParameters.toolchain.swiftCompilerPath.pathString,
+            "-L", buildPath.pathString,
+            "-o", buildPath.appending(components: "exe").pathString,
+            "-module-name", "exe",
+            "-emit-executable",
+            "@\(buildPath.appending(components: "exe.product", "Objects.LinkFileList"))",
+            "-Xlinker", "-rpath", "-Xlinker", "/fake/path/lib/swift-5.5/macosx",
+            "-target", defaultTargetTriple,
+            "-Xlinker", "-add_ast_path", "-Xlinker", buildPath.appending(components: "exe.build", "exe.swiftmodule").pathString,
+            "-Xlinker", "-add_ast_path", "-Xlinker", buildPath.appending(components: "lib.swiftmodule").pathString,
+            "-g",
+        ]
+      #elseif os(Windows)
+        let linkArguments = [
+            result.plan.buildParameters.toolchain.swiftCompilerPath.pathString,
+            "-L", buildPath.pathString,
+            "-o", buildPath.appending(components: "exe.exe").pathString,
+            "-module-name", "exe",
+            "-emit-executable",
+            "@\(buildPath.appending(components: "exe.product", "Objects.LinkFileList"))",
+            "-target", defaultTargetTriple,
+            "-g", "-use-ld=lld", "-Xlinker", "-debug:dwarf",
+        ]
+      #else
+        let linkArguments = [
+            result.plan.buildParameters.toolchain.swiftCompilerPath.pathString,
+            "-L", buildPath.pathString,
+            "-o", buildPath.appending(components: "exe").pathString,
+            "-module-name", "exe",
+            "-emit-executable",
+            "@\(buildPath.appending(components: "exe.product", "Objects.LinkFileList"))",
+            "-target", defaultTargetTriple,
+            "-g"
+        ]
+      #endif
+
+        XCTAssertEqual(try result.buildProduct(for: "exe").linkArguments(), linkArguments)
+        XCTAssertNoDiagnostics(observability.diagnostics)
+    }
 }
diff --git a/swiftpm/Tests/BuildTests/MockBuildTestHelper.swift b/swiftpm/Tests/BuildTests/MockBuildTestHelper.swift
index 243f68a58..b4dd25595 100644
--- a/swiftpm/Tests/BuildTests/MockBuildTestHelper.swift
+++ b/swiftpm/Tests/BuildTests/MockBuildTestHelper.swift
@@ -71,6 +71,7 @@ func mockBuildParameters(
     toolchain: PackageModel.Toolchain = MockToolchain(),
     flags: PackageModel.BuildFlags = PackageModel.BuildFlags(),
     shouldLinkStaticSwiftStdlib: Bool = false,
+    shouldDisableLocalRpath: Bool = false,
     canRenameEntrypointFunctionName: Bool = false,
     destinationTriple: Basics.Triple = hostTriple,
     indexStoreMode: BuildParameters.IndexStoreMode = .off,
@@ -88,6 +89,7 @@ func mockBuildParameters(
         pkgConfigDirectories: [],
         workers: 3,
         shouldLinkStaticSwiftStdlib: shouldLinkStaticSwiftStdlib,
+        shouldDisableLocalRpath: shouldDisableLocalRpath,
         canRenameEntrypointFunctionName: canRenameEntrypointFunctionName,
         indexStoreMode: indexStoreMode,
         useExplicitModuleBuild: useExplicitModuleBuild,
diff --git a/swiftpm/Utilities/bootstrap b/swiftpm/Utilities/bootstrap
index 33aacd0b7..5d8ab14b8 100755
--- a/swiftpm/Utilities/bootstrap
+++ b/swiftpm/Utilities/bootstrap
@@ -769,6 +769,9 @@ def get_swiftpm_flags(args):
             "--configuration", "release",
         ])
 
+    if os.environ.get('ANDROID_DATA') and not '-macosx' in args.build_target and args.command == 'install':
+        build_flags.append("--disable-local-rpath")
+
     if args.verbose:
         build_flags.append("--verbose")
 
